%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
% Adjuster v1.2                                                           %
% a Metaflop-font © 2012 by Simon Egli, Marco MŸller                      %
% www.metaflop.com                                                        %
%                                                                         %
% This program is free software: you can redistribute it and/or modify    %
% it under the terms of the GNU General Public License as published by    %
% the Free Software Foundation, either version 3 of the License, or       %
% (at your option) any later version.                                     %
%                                                                         %
% This program is distributed in the hope that it will be useful,         %
% but WITHOUT ANY WARRANTY; without even the implied warranty of          % 
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            % 
% GNU General Public License for more details.                            %
%                                                                         %
% You should have received a copy of the GNU General Public License       %
% along with this program. If not, see <http://www.gnu.org/licenses/>.    %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% additional parameters / hidden parameter list %
s#:=0.15u#;      % extra space / compress glyphs
leftstemloc#:=0.2u#+s#;	% position of left stem
letter_fit#:=0.0u#; % amount of letter fit
shrink_fit:=.0u#;  % amount of shrink fit
space:=0; % letterspacing (0 = compress)

% sidebearings on / off %
% definition of left and right-side bearings. To use in glyph after beginchar: normal_adjust_fit(-1.5u#,-1.5u#);
if (sidebearing=1):
 def normal_adjust_fit(expr left_adjustment,right_adjustment) = 
 l := -hround(left_adjustment*hppp)-letter_fit#; 
 interim xoffset := -l; charwd := charwd+2letter_fit#+left_adjustment+right_adjustment; 
 r := l+hround(charwd*hppp)-shrink_fit;
 w := r-hround(right_adjustment*hppp)-letter_fit#; enddef;fi

def endchar =
 scantokens extra_endchar;
 chardx:=w;
 shipit;
 endgroup enddef;	

% mode=localfont;
mode=luxo;
mode_setup;

% pixel conversions %
define_pixels(s,u);
define_blacker_pixels(px,py);
define_good_x_pixels(leftstemloc, letter_fit);
define_good_y_pixels(cap, bar1, bar2, bar3, bar4, bar5);
% define_corrected_pixels(o);

% pen settings %
if penshape=1:
pickup pencircle xscaled px yscaled py rotated penang; 
elseif penshape=2:
pickup pensquare xscaled px yscaled py rotated penang; 
elseif penshape=3:
pickup penrazor xscaled px rotated penang; fi

adj_pen:=savepen;

% begin charater macro %
def beginadjchar(expr code, unit_width, h, d) =
 beginchar(code,unit_width*u#+s#,h,d);
pickup adj_pen;
enddef;

% glyph inputs %
input glyphs/uc/A
input glyphs/uc/B
input glyphs/uc/C
input glyphs/uc/D
input glyphs/uc/E
input glyphs/uc/F
input glyphs/uc/G
input glyphs/uc/H
input glyphs/uc/I 
input glyphs/uc/J
input glyphs/uc/K
input glyphs/uc/L
input glyphs/uc/M
input glyphs/uc/N
input glyphs/uc/O
input glyphs/uc/P
input glyphs/uc/Q
input glyphs/uc/R
input glyphs/uc/S
input glyphs/uc/T
input glyphs/uc/U
input glyphs/uc/V
input glyphs/uc/W
input glyphs/uc/X
input glyphs/uc/Y
input glyphs/uc/Z

input glyphs/lc/a
input glyphs/lc/b
input glyphs/lc/c
input glyphs/lc/d
input glyphs/lc/e
input glyphs/lc/f
input glyphs/lc/g
input glyphs/lc/h
input glyphs/lc/i
input glyphs/lc/j
input glyphs/lc/k
input glyphs/lc/l
input glyphs/lc/m
input glyphs/lc/n
input glyphs/lc/o
input glyphs/lc/p
input glyphs/lc/q
input glyphs/lc/r
input glyphs/lc/s
input glyphs/lc/t
input glyphs/lc/u
input glyphs/lc/v
input glyphs/lc/w
input glyphs/lc/x
input glyphs/lc/y
input glyphs/lc/z

input glyphs/num/0
input glyphs/num/1
input glyphs/num/2
input glyphs/num/3
input glyphs/num/4
input glyphs/num/5
input glyphs/num/6
input glyphs/num/7
input glyphs/num/8
input glyphs/num/9

input glyphs/punct/comma
input glyphs/punct/hyphen
input glyphs/punct/plus
input glyphs/punct/equal
input glyphs/punct/slash
input glyphs/punct/colon
input glyphs/punct/semicolon
input glyphs/punct/period
input glyphs/punct/excl
input glyphs/punct/question
input glyphs/punct/amp
input glyphs/punct/space

font_quad:=10u#+0s#;
font_normal_space:=3u#+0s#;
font_normal_stretch:=0u#;
font_normal_shrink:=0u#;
font_coding_scheme:="OT1";